---
description: Best practices for working with Supabase in a type-safe way, including database type generation, system table access, RLS policies, error handling, and performance optimizations. Use this rule when implementing database operations, authentication, or backend features with Supabase."  Keywords: Supabase, type safety, database types, row level security, RLS, PostgreSQL, typed queries, authentication, system tables
globs: 
alwaysApply: false
---
# Supabase Integration Best Practices

This document outlines the best practices for integrating Supabase with the Hustle Hub application, focusing on type safety, security, and performance.

## Client Setup

### Configuration

Create a typed Supabase client in a central location:

```typescript
// src/app/lib/supabase/client.ts
import { createClient } from '@supabase/supabase-js'
import { Database } from '@/types/supabase'

// Create a single supabase client for interacting with your database
export const supabase = createClient<Database>(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
)
```

For server components, create a server-side client:

```typescript
// src/app/lib/supabase/server.ts
import { createServerComponentClient } from '@supabase/auth-helpers-nextjs'
import { cookies } from 'next/headers'
import { Database } from '@/types/supabase'

export function createServerClient() {
  return createServerComponentClient<Database>({ cookies })
}
```

### Types Generation

1. Always generate and use database types:

```bash
npx supabase gen types typescript --project-id <project-id> > src/app/types/supabase.ts
```

2. Include type generation in your CI/CD pipeline to keep types in sync with schema changes.

3. Export generated types for use throughout the application:

```typescript
// src/app/types/supabase.ts
export type Tables<T extends keyof Database['public']['Tables']> = 
  Database['public']['Tables'][T]['Row']
  
export type Enums<T extends keyof Database['public']['Enums']> = 
  Database['public']['Enums'][T]

export type InsertDTO<T extends keyof Database['public']['Tables']> = 
  Database['public']['Tables'][T]['Insert']

export type UpdateDTO<T extends keyof Database['public']['Tables']> = 
  Database['public']['Tables'][T]['Update']
```

## Data Access Patterns

### Repositories

Organize database access in repository modules by entity:

```typescript
// src/app/lib/repositories/tasksRepository.ts
import { supabase } from '@/lib/supabase/client'
import { Tables, InsertDTO, UpdateDTO } from '@/types/supabase'

export type Task = Tables<'tasks'>
export type TaskInsert = InsertDTO<'tasks'>
export type TaskUpdate = UpdateDTO<'tasks'>

export async function getTasks(userId: string): Promise<Task[]> {
  const { data, error } = await supabase
    .from('tasks')
    .select('*')
    .eq('user_id', userId)
    .order('created_at', { ascending: false })
  
  if (error) throw error
  return data || []
}

export async function createTask(task: TaskInsert): Promise<Task> {
  const { data, error } = await supabase
    .from('tasks')
    .insert(task)
    .select()
    .single()
  
  if (error) throw error
  return data
}

// Add other methods: updateTask, deleteTask, etc.
```

### Hooks

Create custom hooks for data access in client components:

```typescript
// src/app/lib/hooks/useTasks.ts
import { useState, useEffect } from 'react'
import { supabase } from '@/lib/supabase/client'
import { Task, getTasks, createTask } from '@/lib/repositories/tasksRepository'
import { useAuth } from '@/lib/hooks/useAuth'

export function useTasks() {
  const [tasks, setTasks] = useState<Task[]>([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<Error | null>(null)
  const { user } = useAuth()
  
  useEffect(() => {
    if (!user) return
    
    const fetchTasks = async () => {
      try {
        setLoading(true)
        const data = await getTasks(user.id)
        setTasks(data)
      } catch (err) {
        setError(err instanceof Error ? err : new Error('Unknown error'))
      } finally {
        setLoading(false)
      }
    }
    
    fetchTasks()
    
    // Set up realtime subscription
    const channel = supabase
      .channel('tasks_changes')
      .on('postgres_changes', 
        { event: '*', schema: 'public', table: 'tasks', filter: `user_id=eq.${user.id}` },
        (payload) => {
          // Handle different change types
          if (payload.eventType === 'INSERT') {
            setTasks(prev => [payload.new as Task, ...prev])
          } else if (payload.eventType === 'UPDATE') {
            setTasks(prev => prev.map(task => 
              task.id === payload.new.id ? payload.new as Task : task
            ))
          } else if (payload.eventType === 'DELETE') {
            setTasks(prev => prev.filter(task => task.id !== payload.old.id))
          }
        }
      )
      .subscribe()
    
    return () => {
      supabase.removeChannel(channel)
    }
  }, [user])
  
  // Add task creation, updating, and deletion methods
  const addTask = async (newTask: Omit<Task, 'id' | 'created_at'>) => {
    if (!user) return
    try {
      const taskWithUserId = { 
        ...newTask, 
        user_id: user.id 
      }
      const created = await createTask(taskWithUserId)
      // If not using realtime, update state manually
      // setTasks(prev => [created, ...prev])
      return created
    } catch (err) {
      setError(err instanceof Error ? err : new Error('Unknown error'))
      throw err
    }
  }
  
  // Add other methods
  
  return { tasks, loading, error, addTask }
}
```

## Authentication

### Auth Hooks

Create a custom auth hook:

```typescript
// src/app/lib/hooks/useAuth.ts
import { useEffect, useState } from 'react'
import { supabase } from '@/lib/supabase/client'
import { User, Session } from '@supabase/supabase-js'

export function useAuth() {
  const [user, setUser] = useState<User | null>(null)
  const [session, setSession] = useState<Session | null>(null)
  const [loading, setLoading] = useState(true)
  
  useEffect(() => {
    // Get initial session
    supabase.auth.getSession().then(({ data: { session } }) => {
      setSession(session)
      setUser(session?.user ?? null)
      setLoading(false)
    })
    
    // Listen for auth changes
    const { data: { subscription } } = supabase.auth.onAuthStateChange(
      (_event, session) => {
        setSession(session)
        setUser(session?.user ?? null)
        setLoading(false)
      }
    )
    
    return () => {
      subscription.unsubscribe()
    }
  }, [])
  
  const signIn = async (email: string, password: string) => {
    const { error } = await supabase.auth.signInWithPassword({ email, password })
    if (error) throw error
  }
  
  const signUp = async (email: string, password: string) => {
    const { error } = await supabase.auth.signUp({ email, password })
    if (error) throw error
  }
  
  const signOut = async () => {
    const { error } = await supabase.auth.signOut()
    if (error) throw error
  }
  
  return {
    user,
    session,
    loading,
    signIn,
    signUp,
    signOut
  }
}
```

### Auth Context Provider

Create an auth context provider for the application:

```typescript
// src/app/providers/AuthProvider.tsx
'use client'

import { createContext, useContext, ReactNode } from 'react'
import { useAuth } from '@/lib/hooks/useAuth'

type AuthContextType = ReturnType<typeof useAuth>

const AuthContext = createContext<AuthContextType | undefined>(undefined)

export function AuthProvider({ children }: { children: ReactNode }) {
  const auth = useAuth()
  
  return (
    <AuthContext.Provider value={auth}>
      {children}
    </AuthContext.Provider>
  )
}

export function useAuthContext() {
  const context = useContext(AuthContext)
  if (context === undefined) {
    throw new Error('useAuthContext must be used within an AuthProvider')
  }
  return context
}
```

## Security

### Row Level Security (RLS)

Always implement Row Level Security (RLS) for all tables:

```sql
-- Example RLS policy for tasks table
CREATE TABLE tasks (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  title TEXT NOT NULL,
  description TEXT,
  status TEXT NOT NULL DEFAULT 'todo',
  created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
  updated_at TIMESTAMPTZ
);

-- Enable RLS
ALTER TABLE tasks ENABLE ROW LEVEL SECURITY;

-- Create policies
CREATE POLICY "Users can view their own tasks" 
  ON tasks FOR SELECT 
  USING (auth.uid() = user_id);

CREATE POLICY "Users can insert their own tasks" 
  ON tasks FOR INSERT 
  WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update their own tasks" 
  ON tasks FOR UPDATE 
  USING (auth.uid() = user_id);

CREATE POLICY "Users can delete their own tasks" 
  ON tasks FOR DELETE 
  USING (auth.uid() = user_id);
```

### Accessing System Tables

When accessing system tables, use functions to maintain security:

```sql
-- Create a function to safely access user information
CREATE OR REPLACE FUNCTION public.get_user_profile(user_id UUID)
RETURNS JSONB
LANGUAGE SQL SECURITY DEFINER
AS $$
  SELECT jsonb_build_object(
    'id', id,
    'email', email,
    'created_at', created_at
  )
  FROM auth.users
  WHERE id = user_id AND (
    -- Only allow access to own data or admin access
    user_id = auth.uid() OR 
    EXISTS (SELECT 1 FROM auth.users WHERE id = auth.uid() AND is_admin = true)
  );
$$;
```

## Performance Optimization

### Optimizing Queries

1. Always select only required columns:

```typescript
// Good
const { data } = await supabase
  .from('tasks')
  .select('id, title, status')
  .eq('user_id', userId)

// Avoid
const { data } = await supabase
  .from('tasks')
  .select('*') // Fetches all columns
  .eq('user_id', userId)
```

2. Use the `count` option for pagination:

```typescript
const { data, count } = await supabase
  .from('tasks')
  .select('*', { count: 'exact' })
  .eq('user_id', userId)
  .range(0, 9) // First 10 items (0-9)
```

3. Use indexes for frequently queried columns:

```sql
CREATE INDEX idx_tasks_user_id ON tasks(user_id);
CREATE INDEX idx_tasks_status ON tasks(status);
CREATE INDEX idx_tasks_created_at ON tasks(created_at);
```

### Realtime Subscriptions

1. Always filter subscriptions to minimize overhead:

```typescript
// Good - only subscribe to relevant changes
const channel = supabase
  .channel('tasks_changes')
  .on('postgres_changes', 
    { 
      event: '*', 
      schema: 'public', 
      table: 'tasks', 
      filter: `user_id=eq.${userId}`
    },
    handleChange
  )
  .subscribe()

// Avoid - subscribing to all changes
const channel = supabase
  .channel('tasks_changes')
  .on('postgres_changes', 
    { 
      event: '*', 
      schema: 'public', 
      table: 'tasks'
    },
    handleChange
  )
  .subscribe()
```

2. Clean up subscriptions properly:

```typescript
useEffect(() => {
  // Set up subscription
  const channel = supabase
    .channel('tasks_changes')
    // ... subscription setup
    .subscribe()
  
  // Clean up on unmount
  return () => {
    supabase.removeChannel(channel)
  }
}, [dependencies])
```

## Error Handling

Create consistent error handling patterns:

```typescript
// src/app/lib/utils/errorHandling.ts
import { PostgrestError } from '@supabase/supabase-js'

export function isPostgrestError(error: unknown): error is PostgrestError {
  return (
    typeof error === 'object' && 
    error !== null && 
    'code' in error && 
    'message' in error && 
    'details' in error
  )
}

export function handleDatabaseError(error: unknown): string {
  if (isPostgrestError(error)) {
    // Known Postgrest errors
    if (error.code === '23505') {
      return 'This record already exists. Please try a different value.'
    }
    if (error.code === '23503') {
      return 'This record is referenced by other records and cannot be deleted.'
    }
    // Add more specific error handling
    
    // Return the details for other database errors
    return error.details || error.message
  }
  
  // Generic error handling
  if (error instanceof Error) {
    return error.message
  }
  
  return 'An unknown error occurred'
}
```

## Database Migrations

1. Use Supabase migrations for schema changes:

```bash
# Create a new migration
npx supabase migration new create_tasks_table

# Apply migrations
npx supabase migration up
```

2. Document database schema in code:

```typescript
// src/app/lib/db/schema.ts
export const SCHEMA = {
  TABLES: {
    TASKS: 'tasks',
    PROJECTS: 'projects',
    USER_PROFILES: 'user_profiles'
  },
  FUNCTIONS: {
    GET_USER_PROFILE: 'get_user_profile'
  }
}
```

## Testing Supabase Integration

Create test helpers for Supabase:

```typescript
// src/app/lib/test/supabaseTestUtils.ts
import { createClient } from '@supabase/supabase-js'
import { Database } from '@/types/supabase'

// Create a client connected to the test database
export function createTestClient() {
  return createClient<Database>(
    process.env.TEST_SUPABASE_URL!,
    process.env.TEST_SUPABASE_SERVICE_KEY!
  )
}

// Helper to clean up test data
export async function cleanupTestData(userId: string) {
  const supabase = createTestClient()
  await supabase.from('tasks').delete().eq('user_id', userId)
  // Clean up other tables as needed
}

// Helper to create test user
export async function createTestUser() {
  const supabase = createTestClient()
  const email = `test-${Date.now()}@example.com`
  const password = 'Password123!'
  
  const { data, error } = await supabase.auth.signUp({
    email,
    password
  })
  
  if (error) throw error
  return { user: data.user, email, password }
}
```

## Deployment

1. Use environment-specific configuration:

```
# .env.development
NEXT_PUBLIC_SUPABASE_URL=https://your-dev-project.supabase.co
NEXT_PUBLIC_SUPABASE_ANON_KEY=your-dev-anon-key

# .env.production
NEXT_PUBLIC_SUPABASE_URL=https://your-prod-project.supabase.co
NEXT_PUBLIC_SUPABASE_ANON_KEY=your-prod-anon-key
```

2. Set up proper CI/CD for database migrations.

## Conclusion

Following these best practices will ensure that your Supabase integration is type-safe, secure, and performant. Always generate and use database types, implement proper RLS policies, and use repository patterns to organize your database access code.
