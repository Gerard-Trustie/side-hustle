type Account {
  userId: String!
  accountId: String!
  walletId: String!
  currency: String!
  aType: String!
  status: String!
  KYC: Int!
  balance: Float!
}

type GAccountId {
  userId: String!
  accountId: String!
  walletId: String!
  currency: String!
  aType: String!
  status: String!
}

type AccountDDB {
  primarySK: String!
  userId: String!
  created: String!
  currency: String!
  aType: String!
  status: String!
  KYC: Int!
  IBAN: String
  updated: String
  balance: Float!
}

type AccountQLDB {
  userId: String!
  accountId: String!
  walletId: String!
  currency: String!
  aType: String!
  status: String!
  KYC: Int!
  balance: Float!
}

type AccountBalance {
  accountId: String!
  date: String!
  balance: Float!
}

type AccountShort {
  primarySK: String!
  userId: String!
  currency: String!
  aType: String!
}

type Address {
  AddressLine1: String!
  AddressLine2: String
  City: String!
  Region: String
  PostalCode: String!
  Country: String!
}

input AddressInput {
  AddressLine1: String!
  AddressLine2: String
  City: String!
  Region: String
  PostalCode: String!
  Country: String!
}

type Allowance {
  userId: String!
  active: Boolean!
  amount: Int!
  conversion: Int!
  day: Int!
  frequency: Int!
  privilege: Boolean!
}

input AllowanceInput {
  active: Boolean!
  amount: Int!
  conversion: Int!
  day: Int!
  frequency: Int!
  privilege: Boolean!
}

type ccPreregistrationData {
  CardId: Int
  AccessKey: String
  PreregistrationData: String
  CardRegistrationURL: String
}

type Chat {
  eventId: String!
  chatBy: User!
  chatFor: User!
  updated: String!
  title: String
  description: String
  picturePath: String
  picture: String
  preview: String
  created: String
  value: Float
  balance: Float
  secret: Boolean
  status: String
  donnors: Int
  comments: Int
  likes: Int
}

type GChat {
  eventId: String!
  chatBy: User!
  chatFor: User!
  updated: String!
  title: String
  description: String
  picturePath: String
  pictures: [String]
  preview: String
  created: String
  value: Float
  balance: Float
  secret: Boolean
  chatStatus: String
  donnors: Int
  comments: Int
  likes: Int
}

type ChatES {
  chatId: String!
  chatBy: User!
  chatFor: User!
  updated: String
  title: String
  description: String
  picturePath: String
  picture: String
  preview: String
  created: String
  value: Float
  balance: Float
  secret: Boolean
  status: String
  donnors: Int
  comments: Int
  likes: Int
}

type ChatsPaginated {
  items: [Chat]
  nextToken: String
}

type Contribution {
  key_as_string: String
  doc_count: Int
  date: String
  countOf: Int
  sumOf: Float
  cumulative: Float
}

input CreateTransactionInput {
  fromUserId: String!
  fromAccountId: String!
  toUserId: String!
  toAccountId: String!
  description: String
  reference: String
  amount: Float!
  currency: String!
  category: String
}

input CreateTransferInput {
  fromUserId: String!
  fromAccountId: String!
  toUserId: String!
  toAccountId: String!
  description: String
  reference: String
  amount: Float!
}

input GCreateContributionInput {
  accountId: String!
  eventId: String!
  message: String
  amount: Float!
  privacy: Int
}

input GCreateIncomeInput {
  walletId: String!
  accountId: String!
  description: String
  reference: String
  amount: Float!
  category: String
}

input GCreateExpenseInput {
  walletId: String!
  accountId: String!
  description: String
  reference: String
  amount: Float!
  category: String
  picture: String
  picturePath: String
  sharedWith: AWSJSON
}

type GExtractExpense {
  description: String
  reference: String
  amount: Float!
  category: String
}

input CreateUsersInput {
  username: String!
  password: String!
  email: String
  givenName: String!
  familyName: String!
  gender: String!
  birthdate: String
  phoneNumber: String
  userRole: String!
  currency: String!
  picture: String
  country: String
  nationality: String
}

type CreditCard {
  CardOwner: String!
  ExpirationDate: Int!
  Alias: String!
  CardProvider: String
  CardType: String
  Country: String
  Product: String
  BankCode: String
  Active: Boolean
  Currency: String
  Validity: String
  Fingerprint: String
}

type KYCPage {
  fileName: String
  filePath: String
}

input KYCPageInput {
  fileName: String
  filePath: String
}

type KYCDocument {
  pages: [KYCPage]
  created: String
  status: docStatus
  docType: docType
}

type ExternalAccount {
  UserId: String!
  Type: String!
  OwnerName: String!
  OwnerAddress: Address
  Active: Boolean
  IBAN: String
  BIC: String
  SortCode: String
  AccountNumber: String
}

input ExternalAccountInput {
  Type: String!
  OwnerName: String!
  OwnerAddress: AddressInput
  IBAN: String
  BIC: String
  SortCode: String
  AccountNumber: String
}

type GAssistants {
  adviser: User!
  default: String!
  analysis: String
  pocketFileId: String
  transFileId: String
}

type GGoalEvent {
  byUser: User!
  eventId: String!
  eventType: String!
  description: String
  title: String
  amount: Float ## amount of contribution
  value: Float ## value of the goal
  balance: Float ## balance of the goal
  created: String
  updated: String
  message: String
  attachment: String
  privacy: String
}

type Event {
  eventId: String!
  eventType: String!
  value: String
  updated: String
  privacy: String
  userId: String
  message: String
}

type EventsPaginated {
  events: [Event]
  nextToken: String
}

type GProviderInfo {
  countryCode: String!
  homeUrl: String!
  loginUrl: String!
  logoUrl: String!
  providerName: String!
  providerStatus: String!
}

type GExternalAccount {
  id: String
  name: String
  nature: String
  balance: Float
  currency_code: String
  connection_id: String
  extra: GExternalAccountExtra
  created_at: String
  updated_at: String
  providerInfo: GProviderInfo
}

type GExternalMeta {
  next_id: String
  next_page: String
}

type GExternalAccountExtra {
  bban: String
  iban: String
  swift: String
  status: String
  card_type: String
  sort_code: String
  client_name: String
  account_name: String
  current_date: String
  current_time: String
  account_number: String
  credit_limit: Float
  blocked_amount: Float
  closing_balance: Float
  available_amount: Float
  next_payment_date: String
  next_payment_amount: Float
}

type GExternalTransaction {
  id: String
  duplicated: Boolean
  mode: String
  status: String
  made_on: String
  amount: Float
  currency_code: String
  description: String
  category: String
  account_id: String
  created_at: String
  updated_at: String
  mood: String
  recurring: Boolean
}

type GExternalTransactionPaginated {
  data: [GExternalTransaction]
  meta: GExternalMeta
}

type GTransactionExtra {
  account_balance_snapshot: Float
  categorization_confidence: Float
  payee: String
  possible_duplicate: Boolean
  posting_date: String
}

type GTransaction {
  transactionId: String!
  accountId: String!
  amount: Float!
  category: String
  created: String!
  currency_code: String!
  description: String
  duplicated: Boolean
  extra: GTransactionExtra
  made_on: String
  mode: String
  mood: String
  status: String
  updated_at: String
  recurring: Boolean
  tagged: String
}

type GTransactionsPaginated {
  transactions: [GTransaction]
  nextToken: String
}

type GAITransactionsResult {
  transactions: [GTransaction]
  answer: String
  threadId: String
}

type Friends {
  userId: String
  primarySK: String
  secondarySK: String
  created: String
  user: User
}

type FriendsGoalStatus {
  userId: String
  primarySK: String
  secondarySK: String
  beneficiary: User
  goalStatus: GoalStatus
}

type GFriendsPostStatus {
  userId: String
  primarySK: String
  secondarySK: String
  beneficiary: User
  postStatus: GPostStatus
}

type FriendsGoalsStatusPaginated {
  friends: [FriendsGoalStatus]
  nextToken: String
}

type GFriendsPostsStatusPaginated {
  friends: [GFriendsPostStatus]
  nextToken: String
}

type FriendsPaginated {
  items: [Friends]
  nextToken: String
}

type Goal {
  detail: GoalDetail
}

type GoalDetail {
  eventId: String!
  eventType: String!
  forId: User!
  byId: User!
  updated: String!
  title: String!
  description: String
  picturePath: String
  picture: String
  preview: String
  created: String
  value: Float!
  balance: Float!
  status: String!
  donors: [String]
  nbContribution: Int
  avgContribution: Float
}

type GBrand {
  slug: String!
  name: String!
  type: String!
  status: GBrandStatus!
  currency: String!
  discount: Float!
  last_updated: String!
  transaction_types: [String!]!
  delivery_methods: [String!]!
  countries_served: [String!]!
  gc_pool: Boolean!
  async_only: Boolean!
  categories: [String!]!
  vat: GBrandVAT!
  digital_face_value_limits: GBrandDigitalFaceValueLimits
  detail: GBrandDetail
  physical_face_value_limits: GBrandPhysicalFaceValueLimits
}

type GBrandStatus {
  code: String!
}

type GBrandVAT {
  exempt: Boolean!
  type: String!
  rate: String
}

type GBrandDigitalFaceValueLimits {
  lower: Int!
  upper: Int!
  minor_unit: Float!
}

type GBrandPhysicalFaceValueLimits {
  lower: Int!
  upper: Int!
}

type GBrandDetail {
  assets: GBrandAssets!
  barcode: String!
  description: String!
  expiry: String!
  redemption_methods: [String!]!
  terms_and_conditions_copy: String
  website_url: String!
  balance_enquiry_url: String
  redemption_instructions_url: String
  terms_and_conditions_url: String
}

type GBrandAssets {
  logo_url: String!
  gift_card_url: String!
}
# Define a common interface
interface GCommonSocial {
  eventId: String! #UUID wtih no prefix
  eventType: String! #post_detail or chat_detail or mesBy or contBy
  title: String!
  description: String
  picturePath: String
  pictures: [String] #list of pictures for goal
  preview: String # first picture preview
  created: String!
  updated: String! #format goal/flash_active/inactive_create/published_date
  value: Float #only needed for saving Goal
  balance: Float #only needed for saving Goal
  secret: Boolean
  byUser: User! #person who wrote the chat or goal
  forUser: User #person who the saving goal is for. null for chat
  lastStatus: String!
}

type GChatDetail implements GCommonSocial {
  eventId: String! #UUID wtih no prefix
  eventType: String! #post_detail or chat_detail or mesBy or contBy
  title: String!
  description: String
  picturePath: String
  pictures: [String] #list of pictures for goal
  preview: String # first picture preview
  created: String!
  updated: String! #format goal/flash_active/inactive_create/published_date
  value: Float #only needed for saving Goal
  balance: Float #only needed for saving Goal
  secret: Boolean
  byUser: User! #person who wrote the chat or goal
  forUser: User #person who the saving goal is for. null for chat
  lastStatus: String!
  #Extra
  comments: Int
  likes: Int
}

type GPostDetail implements GCommonSocial {
  eventId: String! #UUID wtih no prefix
  eventType: String! #post_detail or chat_detail or mesBy or contBy
  title: String!
  description: String
  picturePath: String
  pictures: [String] #list of pictures for goal
  preview: String # first picture preview
  created: String!
  updated: String! #format goal/flash_active/inactive_create/published_date
  value: Float #only needed for saving Goal
  balance: Float #only needed for saving Goal
  secret: Boolean
  byUser: User! #person who wrote the chat or goal
  forUser: User #person who the saving goal is for. null for chat
  lastStatus: String! # created  published  pending  closed  completed  cancelled
  ##Extra
  listDonors: [String] #list of userId of donors
  nbContribution: Int #total number of contributions
  privacy: Int! #0 secret not know to target user, 1 only friends, 2 all users
}

type GEventSocial {
  byUser: User!
  eventId: String!
  eventType: String!
  updated: String
  message: String
  attachment: String
  value: Float
  privacy: String
}

#can be a saving goal or a regular post/chat
input GPostCreateInput {
  description: String
  picturePath: String
  pictures: [String]
  preview: String
  privacy: Int! #0 secret not know to target user, 1 only friends, 2 all users
  title: String!
  beneficiaryId: String
  value: Float
  accountId: String
}

input GoalInput {
  title: String
  description: String
  picturePath: String
  picture: String
  preview: String
  created: String
  value: Float
  secret: Boolean
}

#can be a saving goal or a regular post/chat
input GPostUpdateInput {
  title: String
  description: String
  pictures: [String]
  preview: String
  value: Float #only needed for saving Goal
  privacy: Int #0 secret not know to target user, 1 only friends, 2 all users
  accountId: String
}

type GPostStatus {
  userId: String
  primarySK: String
  created: Int
  published: Int
  completed: Int
  cancelled: Int
  preview: String
  picturePath: String
  picture: String
  fund: [Float]
  written: Int
  shared: Int
}

type GoalStatus {
  userId: String
  primarySK: String
  created: Int
  published: Int
  completed: Int
  cancelled: Int
  preview: String
  picturePath: String
  picture: String
  fund: [Float]
}

type GoalsPaginated {
  items: [Goal]
  nextToken: String
}

type GPostsPaginated {
  items: [GPostDetail]
  nextToken: String
}

type GFeedPaginated {
  chat: GChatDetail
  feedId: String
  like: Boolean
  nextToken: String
}

type GMessageSummary {
  userId: String!
  withUser: User!
  threadId: String! #conv_<threadId>
  message: String!
  nbMessage: Int!
  updated: String!
}

type GConversationsSummaryPaginated {
  summary: [GMessageSummary]
  nextToken: String
}

type GMessage {
  eventId: String! #conv_<userId>
  eventType: String! #<withUserId>_<date>
  message: String!
  author: String! #<id of the one writing the message
}

type GConversationsPaginated {
  messages: [GMessage]
  nextToken: String
}

type GSharedWith {
  userId: String!
  amount: Float!
}

type GPocketSummary {
  primarySK: String!
  category: String
  balance: Float
  budget: Float
  emoji: String
}

type GGiftCard {
  transactionId: String!
  brand: String!
  url: String!
  currency: String!
  amount: Float! ##face_Value
  cost: Float!
  discount: Float!
  expiration_date: String!
  balance: Float
  brandDetail: GBrand
}

type IndividualFriendsRequest {
  userId: String
  givenName: String
  familyName: String
  items: [Friends]
}

type IndividualGoals {
  userId: String
  givenName: String
  familyName: String
  picturePath: String
  picture: String
  preview: String
  gender: String
  userRole: String
  items: [Goal]
}

type IndividualTaskBalance {
  userId: String
  givenName: String
  familyName: String
  taskBalance: TaskBalance
}

type GChatMessage {
  byUser: User
  eventId: String!
  eventType: String!
  updated: String
  message: String
  attachment: String
  privacy: String
  value: String
}

input MessageInput {
  updated: String!
  message: String!
  attachment: String
  privacy: String
}

type GChatMessagePaginated {
  messages: [GChatMessage]
  nextToken: String
}

type GUserStats{
    month: String
    nbRegisteredUser: Int
    nbActiveUser: Int
    nbActiveGoal: Int
    nbChat: Int
}

type GAccountStats{
    month: String
    nbAccount: Int
    nbTransaction: Int
}

type GPrepaidStats{
    month: String
    nbPrepaid: Int
    nbTransaction: Int
    valueTransaction: Float
}

type Mutation {
  #### Acount Management
  }

type PaginatedTransactions {
  transac: [Transaction]
}

type Query {
    getUserStatistics: GUserStats
    getAccountStatistics: GAccountStats
    getPrepaidStatistics: GPrepaidStats
    getUserDetails(userId: String!): UserDetails
      @aws_auth(cognito_groups: ["Reader", "Admin"])
    getUserBasicProfile(userId: String!): User
      @aws_auth(cognito_groups: ["Reader", "Admin"])
    getUserExtendedProfile(userId: String!): UserDetails
      @aws_auth(cognito_groups: ["Reader", "Admin"])
  getUserSetting(userId: String!): UserSetting
    @aws_auth(cognito_groups: ["Reader", "Admin"])
  }

type Subscription {
  #  Subscribes to all new messages in a given Conversation.

}

type Supervision {
  userId: String!
  financial: Int
  goal: Int
  privilege: Int
  social: Int
}

input SupervisionInput {
  financial: Int
  goal: Int
  privilege: Int
  social: Int
}

input TableBooleanFilterInput {
  ne: Boolean
  eq: Boolean
}

input TableFloatFilterInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  contains: Float
  notContains: Float
  between: [Float]
}

input TableIDFilterInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
}

input TableIntFilterInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  contains: Int
  notContains: Int
  between: [Int]
}

input TableStringFilterInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
}

input TableUserFilterInput {
  secondarySK: TableStringFilterInput
  email: TableStringFilterInput
  phoneNumber: TableStringFilterInput
}

type Task {
  userId: String!
  primarySK: String!
  secondarySK: String
  description: String
  value: Int
  type: taskType
  awardedTime: Int
}

type TaskBalance {
  userId: String!
  balance: Int!
}

input TaskInput {
  type: taskType!
  secondarySK: String!
  description: String
  value: Int
  awardedTime: Int
}

type TaskPaginated {
  items: [TaskRecord]
  nextToken: String
}

type TaskRecord {
  eventId: String!
  eventType: String!
  title: String
  description: String
  value: Int
  type: taskType
  awardedTime: Int
}

input TaskRecordInput {
  taskRecordId: String!
  type: taskType!
  title: String!
  description: String
  value: Int!
  awardedTime: Int
}

type TransactionPaginated {
  items: [Transaction]
  nextToken: String
}

type TransactionResult {
  verificationMethod: String
  verificationBy: String
  transactionId: String
}

type Transaction {
  accountId: String!
  transactionId: String!
  created: String!
  description: String
  reference: String
  amount: Float!
  tType: String!
  category: String
  balance: Float!
  status: String!
}

type accountAIResult {
  transactions: [Transaction]
  format: String
}

input UpdateGoalInput {
  beneficiaryId: String!
  goalId: String!
  title: String
  description: String
  picturePath: String
  picture: String
  preview: String
  status: String
  value: Float
}

input UpdateTransactionsInput {
  accountId: String!
  transactionId: String!
  date: String
}

input UpdateUserBasicInput {
  picturePath: String
  picture: String
  preview: String
  givenName: String
  familyName: String
  gender: String
  birthdate: String
  phoneNumber: String
  adviserId: String
  appTheme: Int
  firstUsed: String
  lastUsed: String
}

input UpdateUserDetailsInput {
  nationality: String
  street: String
  city: String
  postalCode: String
  country: String
}

input UpdateUserSettingInput {
  privacyGoal: Int
  privacyCont: Int
  notification: [Boolean]
  confirmation: [Boolean]
  deviceName: String
  pushToken: String
}

type User {
  userId: String!
  primarySK: String!
  globalKey: String!
  appTheme: Int!
  appLevel: Int!
  email: String
  picturePath: String
  picture: String
  preview: String
  givenName: String!
  familyName: String!
  gender: String!
  birthdate: String!
  phoneNumber: String
  userRole: String!
  created: String!
  currency: String!
  externalUserId: String
  adviserId: String
  firstUsed: String
  lastUsed: String
}

type UserDetails {
  userId: String!
  primarySK: String!
  nationality: String
  street: String
  city: String
  postalCode: String
  country: String
  KYCStatus: String
  proofOfId: String
  proofOfResidence: String
}

type UserSetting {
  userId: String!
  primarySK: String!
  privacyGoal: Int
  privacyCont: Int
  notification: [Boolean]
  confirmation: [Boolean]
  deviceName: String
  pushToken: String
}

enum Visibility {
  public
  private
}

enum friendAction {
  invite
  accept
  approveSend
  approveReceive
  delete
  block
  unblock
}

enum friendActionBoth {
  friend
  invitWaiting
  blocked
}

enum friendStatus {
  friend
  invit
  blocked
}

enum searchBy {
  email
  phone
  name
}

enum taskType {
  reward
  chore
  penalty
}

enum docType {
  IDENTITY_PROOF
  ADDRESS_PROOF
}

enum docStatus {
  CREATED
  VALIDATION_ASKED
  VALIDATED
  REFUSED
  OUT_OF_DATE
}
